{
  "Spec - Styled Component Scaffolding": {
    "prefix": "!scaffold",
    "body": [
      "import React from \"react\";",
      "import { mount } from \"enzyme\";\n",
      "import $1 from \"./\";",
      "import Theme from \"../themeProvider\";\n",
      "const buildComponent = newProps => {",
      "\treturn mount(<$1 {...newProps} />, {",
      "\t\twrappingComponent: ({ children }) => <Theme ui=\"dmp\">{children}</Theme>",
      "\t});",
      "};",
      "describe(\"components/${1/^(.)(.*)$/${1:/downcase}${2}/}\", () => {",
      "\tdescribe(\"Mounting\", () => {",
      "\t\tit(\"should render into the document\", () => {",
      "\t\t\tconst component = buildComponent();",
      "\t\t\texpect(component).not.toBe(null);",
      "\t\t});",
      "\t});",
      "});"
    ],
    "description": "Scaffold out a new Spec file"
  },
  "Stylesheet - Styled Component Scaffolding": {
    "prefix": "!scaffold",
    "body": [
      "import styled, { css } from \"styled-components\";",
      "import th from \"../../util/themeHelper.js\";\n",
      "export const ${2:componentName} = styled.${1:elementType}`",
      "\t${3:styles}",
      "`;"
    ],
    "description": "Scaffold out a new Styled Components stylesheet"
  },
  "Stylesheet - Styled Component Block": {
    "prefix": "!block",
    "body": [
      "export const ${2:componentName} = styled.${1:elementType}`",
      "\t${3:styles}",
      "`;"
    ],
    "description": "Create a new Styled Component"
  },
  "Stylesheet - ThemeHelper": {
    "prefix": "!th",
    "body": [
      "import th from \"../../util/themeHelper.js\";"
    ],
    "description": "Import the ThemeHelper function"
  },
  "Stylesheet - Styled Component Switch": {
    "prefix": "!switch",
    "body": [
      "const $2 = ({ theme, $2 }) => {",
      "\tswitch ($2) {",
      "\t\tcase \"$3\":",
      "\t\t\treturn css`",
      "\t\t\t\t$4;",
      "\t\t\t`;",
      "\tdefault:",
      "\t\t\treturn ``;",
      "\t}",
      "};"
    ],
    "description": "A switch statement to be used in a stylesheet"
  },
  "Stylesheet - Reusable Style Block": {
    "prefix": "!style",
    "body": [
      "const $1 = css`\n",
      "\t$2\n",
      "`;"
    ],
    "description": "Add a block of CSS that can be reused within multiple Styled Components"
  },
  "Spec - Console Log": {
    "prefix": "!clog",
    "body": [
      "console.log($1); // eslint-disable-line"
    ],
    "description": "Add a console log"
  },
  "Spec - Console Log - Debug": {
    "prefix": "!clogged",
    "body": [
      "console.log(component.debug()); // eslint-disable-line"
    ],
    "description": "Add a console log with `component.debug()`"
  },
  "Spec - Build Component": {
    "prefix": "!buildcomp",
    "body": [
      "import Theme from \"../themeProvider\";",
      "\nconst buildComponent = newProps => {",
      "\treturn mount(<$1 {...newProps} />, {",
      "\t\twrappingComponent: ({ children }) => <Theme ui=\"dmp\">{children}</Theme>",
      "\t});",
      "};"
    ],
    "description": "Use buildComponent in your test file"
  }
}